import React, { useState, useEffect } from 'react';

const Index = () => {
  const [inputValue, setInputValue] = useState('');
  const maxChars = 50;
  const bitePercentage = (inputValue.length / maxChars) * 100;

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —É–∫—É—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –±—É–ª–∫–∏
  const topBiteSize = Math.min(bitePercentage * 0.8, 80);
  const bottomBiteSize = Math.min(bitePercentage * 0.6, 60);
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —É–∫—É—Å–∞ - –ø–æ–ª—É–∫—Ä—É–≥–ª–∞—è –≤—ã–µ–º–∫–∞
  const createBiteShape = (size: number, isTop: boolean) => {
    if (size === 0) return 'none';
    
    if (isTop) {
      // –î–ª—è –≤–µ—Ä—Ö–Ω–µ–π –±—É–ª–∫–∏ - —É–∫—É—Å —Å–ø—Ä–∞–≤–∞
      const biteWidth = size;
      const biteDepth = size * 0.4;
      return `polygon(0% 0%, ${100 - biteWidth}% 0%, ${100 - biteWidth + biteDepth}% 25%, ${100 - biteWidth + biteDepth * 0.8}% 50%, ${100 - biteWidth + biteDepth}% 75%, ${100 - biteWidth}% 100%, 0% 100%)`;
    } else {
      // –î–ª—è –Ω–∏–∂–Ω–µ–π –±—É–ª–∫–∏ - —É–∫—É—Å —Å–ª–µ–≤–∞
      const biteWidth = size;
      const biteDepth = size * 0.4;
      return `polygon(${biteWidth}% 0%, 100% 0%, 100% 100%, ${biteWidth}% 100%, ${biteWidth - biteDepth}% 75%, ${biteWidth - biteDepth * 0.8}% 50%, ${biteWidth - biteDepth}% 25%)`;
    }
  };

  return (
    <div className="min-h-screen bg-white flex items-center justify-center relative overflow-hidden">
      {/* –ù–µ–æ–Ω–æ–≤—ã–π —Ñ–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º */}
      <div className="absolute inset-0 bg-gradient-to-br from-cyan-100/30 via-white to-pink-100/30"></div>
      
      {/* –ù–µ–æ–Ω–æ–≤—ã–µ —á–∞—Å—Ç–∏—Ü—ã */}
      <div className="absolute inset-0 overflow-hidden">
        {[...Array(20)].map((_, i) => (
          <div
            key={i}
            className="absolute w-1 h-1 bg-cyan-400 rounded-full animate-pulse"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 2}s`,
              animationDuration: `${2 + Math.random() * 3}s`
            }}
          ></div>
        ))}
      </div>

      <div className="relative z-10 flex flex-col items-center">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <h1 className="text-6xl font-bold mb-16 text-gray-800">
          –ë–£–†–ì–ï–†
        </h1>

        {/* –ë—É—Ä–≥–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */}
        <div className="relative">
          {/* –í–µ—Ä—Ö–Ω—è—è –±—É–ª–∫–∞ */}
          <div className="relative mb-2">
            <div 
              className="w-80 h-20 bg-gradient-to-r from-yellow-600 to-orange-500 rounded-full relative overflow-hidden shadow-lg shadow-yellow-500/50"
              style={{
                clipPath: createBiteShape(topBiteSize, true)
              }}
            >
              {/* –ù–µ–æ–Ω–æ–≤–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –±—É–ª–∫–∏ */}
              <div className="absolute inset-0 bg-gradient-to-r from-yellow-400/30 to-orange-400/30 animate-pulse"></div>
              
              {/* –ö—É–Ω–∂—É—Ç –Ω–∞ –±—É–ª–∫–µ */}
              {[...Array(8)].map((_, i) => {
                const seedLeft = 20 + (i * 8);
                const isInBite = topBiteSize > 0 && seedLeft > (100 - topBiteSize);
                return (
                  <div
                    key={i}
                    className="absolute w-2 h-2 bg-amber-800 rounded-full"
                    style={{
                      left: `${seedLeft}%`,
                      top: `${30 + (i % 2) * 20}%`,
                      opacity: isInBite ? 0 : 1,
                      transition: 'opacity 0.3s ease-in-out'
                    }}
                  ></div>
                );
              })}
              
              {/* –°–ª–µ–¥ –æ—Ç —É–∫—É—Å–∞ */}
              {topBiteSize > 0 && (
                <div 
                  className="absolute right-0 top-0 h-full bg-amber-900/30 rounded-full"
                  style={{
                    width: `${topBiteSize * 0.6}%`,
                    clipPath: `circle(50% at 80% 50%)`
                  }}
                ></div>
              )}
            </div>
          </div>

          {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–∫–æ—Ç–ª–µ—Ç–∞) */}
          <div className="relative mb-2">
            <div className="relative">
              <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value.slice(0, maxChars))}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
                className="w-80 h-16 px-6 text-xl font-bold bg-white border-4 border-gray-300 rounded-full text-gray-800 placeholder-gray-500 focus:outline-none focus:border-blue-400 focus:shadow-lg focus:shadow-blue-400/50 transition-all duration-300"
                style={{
                  textShadow: '0 0 10px currentColor',
                  boxShadow: '0 0 20px rgba(0, 255, 255, 0.3), inset 0 0 20px rgba(255, 0, 128, 0.1)'
                }}
              />
              
              {/* –ù–µ–æ–Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–æ–∫—Ä—É–≥ –∏–Ω–ø—É—Ç–∞ */}
              <div className="absolute inset-0 rounded-full border-2 border-pink-400/50 animate-pulse pointer-events-none"></div>
            </div>
            
            {/* –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ */}
            <div className="absolute -bottom-8 right-0 text-gray-600 text-sm font-mono">
              {inputValue.length}/{maxChars}
            </div>
          </div>

          {/* –ù–∏–∂–Ω—è—è –±—É–ª–∫–∞ */}
          <div className="relative">
            <div 
              className="w-80 h-20 bg-gradient-to-r from-yellow-700 to-orange-600 rounded-full relative overflow-hidden shadow-lg shadow-orange-500/50"
              style={{
                clipPath: createBiteShape(bottomBiteSize, false)
              }}
            >
              {/* –ù–µ–æ–Ω–æ–≤–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –±—É–ª–∫–∏ */}
              <div className="absolute inset-0 bg-gradient-to-r from-yellow-400/30 to-orange-400/30 animate-pulse"></div>
              
              {/* –°–ª–µ–¥ –æ—Ç —É–∫—É—Å–∞ */}
              {bottomBiteSize > 0 && (
                <div 
                  className="absolute left-0 top-0 h-full bg-amber-900/30 rounded-full"
                  style={{
                    width: `${bottomBiteSize * 0.6}%`,
                    clipPath: `circle(50% at 20% 50%)`
                  }}
                ></div>
              )}
            </div>
          </div>

          {/* –≠—Ñ—Ñ–µ–∫—Ç —Å—ä–µ–¥–∞–Ω–∏—è */}
          {bitePercentage > 80 && (
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="text-4xl font-bold text-green-400 animate-bounce">
                –°–™–ï–î–ï–ù! üçî
              </div>
            </div>
          )}
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –ø–æ–µ–¥–∞–Ω–∏—è */}
        <div className="mt-12 w-80">
          <div className="text-center text-gray-700 text-lg font-bold mb-2">
            –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–µ–¥–∞–Ω–∏—è: {Math.round(bitePercentage)}%
          </div>
          <div className="w-full h-3 bg-gray-800 rounded-full overflow-hidden border border-cyan-400/50">
            <div 
              className="h-full bg-gradient-to-r from-green-400 via-yellow-400 to-red-400 transition-all duration-300 ease-out"
              style={{ 
                width: `${bitePercentage}%`,
                boxShadow: '0 0 10px currentColor'
              }}
            ></div>
          </div>
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
        <div className="mt-8 text-center text-gray-600 text-sm max-w-md">
          <p>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ, –∫–∞–∫ –±—É—Ä–≥–µ—Ä –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å—ä–µ–¥–∞–µ—Ç—Å—è!</p>
          <p className="mt-2 text-gray-500">–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤ = –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—ä–µ–¥–µ–Ω–Ω—ã–π –±—É—Ä–≥–µ—Ä</p>
        </div>
      </div>
    </div>
  );
};

export default Index;